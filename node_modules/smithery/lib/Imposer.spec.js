"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//setting up test environment
const chai_1 = require("chai");
require("mocha");
//import project stuff
const Imposer_1 = require("./Imposer");
const Parser_1 = require("./Parser");
const Generator_1 = require("./Generator");
const RuleSet_1 = require("./RuleSet");
describe('Check the ImposerClass to work properly with given informations', () => {
    let imp;
    beforeEach('Setup the Imposer', () => {
        const pf = new Parser_1.ParserFactory();
        const gf = new Generator_1.GeneratorFactory();
        const rs = new RuleSet_1.RuleSet();
        imp = new Imposer_1.Imposer(pf, gf, rs);
    });
    it('Check if imposer is successfully initialized', () => {
        chai_1.expect(imp).not.to.be.undefined;
    });
    it('Check if new ParserFactory is assignable', () => {
        const orig_parser = imp.getParserFactory();
        const new_parser = new Parser_1.ParserFactory();
        imp.setParserFactory(new_parser);
        chai_1.expect(imp.getParserFactory()).not.to.be.undefined;
        chai_1.expect(imp.getParserFactory()).not.equal(orig_parser);
    });
    it('Check if new GeneratorFactory is assignable', () => {
        const orig_generator = imp.getGeneratorFactory();
        const new_generator = new Generator_1.GeneratorFactory();
        imp.setGeneratorFactory(new_generator);
        chai_1.expect(imp.getGeneratorFactory()).not.to.be.undefined;
        chai_1.expect(imp.getGeneratorFactory()).not.equal(orig_generator);
    });
    it('Check if new RuleSet is assignable', () => {
        const orig_ruleSet = imp.getRuleSet();
        const new_ruleSet = new RuleSet_1.RuleSet();
        imp.setRuleSet(new_ruleSet);
        chai_1.expect(imp.getRuleSet()).not.to.be.undefined;
        chai_1.expect(imp.getRuleSet()).not.equal(orig_ruleSet);
    });
});
//# sourceMappingURL=Imposer.spec.js.map