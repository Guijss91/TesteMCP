"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//setting up the testenvironment
const chai_1 = require("chai");
require("mocha");
const sinon_1 = require("sinon");
//import stuff to test
const DirectoryGenerator_1 = require("./DirectoryGenerator");
const Node_1 = require("../utils/Node");
const enums_1 = require("../enums");
const fs = require("fs");
const path_1 = require("path");
describe('Check the generating ability of the DirectoryGenerator', () => {
    const fakeMkdirSync = (path, options) => {
        return undefined;
    };
    let mkdirSyncStub;
    let writeFileSyncStub;
    beforeEach(() => {
        mkdirSyncStub = sinon_1.stub(fs, 'mkdirSync');
        mkdirSyncStub.callsFake(fakeMkdirSync);
        writeFileSyncStub = sinon_1.stub(fs, 'writeFileSync');
    });
    afterEach(() => {
        writeFileSyncStub.restore();
        mkdirSyncStub.restore();
    });
    it('Check a single folder to be generated ', () => {
        const AST = new Node_1.Node();
        AST.children = [];
        AST.type = enums_1.FileType.Folder;
        AST.name = 'testFolder';
        const dg = new DirectoryGenerator_1.DirectoryGenerator();
        dg.generate(AST, { filePath: 'testPath' });
        chai_1.expect(mkdirSyncStub.calledOnce).to.be.true;
        chai_1.expect(mkdirSyncStub.calledWith(path_1.join('testPath', 'testFolder'))).to.be.true;
    });
    it('Check a single file to be generated', () => {
        const AST = new Node_1.Node();
        AST.type = enums_1.FileType.File;
        AST.name = 'testFile.test';
        AST.content = 'This is my test-content';
        const dg = new DirectoryGenerator_1.DirectoryGenerator();
        dg.generate(AST, { filePath: 'testPath' });
        chai_1.expect(writeFileSyncStub.calledOnce).to.be.true;
        chai_1.expect(writeFileSyncStub.calledWith(path_1.join('testPath', 'testFile.test'), 'This is my test-content')).to.be.true;
    });
    it('Check a single file nested within a folder to be generated', () => {
        const AST_File = new Node_1.Node();
        AST_File.type = enums_1.FileType.File;
        AST_File.name = 'testFile.test';
        AST_File.content = 'This is my test-content';
        const AST_Folder = new Node_1.Node();
        AST_Folder.children = [AST_File];
        AST_Folder.type = enums_1.FileType.Folder;
        AST_Folder.name = 'testFolder';
        const dg = new DirectoryGenerator_1.DirectoryGenerator();
        dg.generate(AST_Folder, { filePath: 'testPath' });
        chai_1.expect(mkdirSyncStub.calledOnce).to.be.true;
        chai_1.expect(mkdirSyncStub.calledWith(path_1.join('testPath', 'testFolder'))).to.be.true;
        chai_1.expect(writeFileSyncStub.calledOnce).to.be.true;
        chai_1.expect(writeFileSyncStub.calledWith(path_1.join('testPath', 'testFolder', 'testFile.test'), 'This is my test-content')).to.be.true;
    });
});
//# sourceMappingURL=DirectoryGenerator.spec.js.map