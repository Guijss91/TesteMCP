"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Project_1 = require("../Project");
const chai_1 = require("chai");
const sinon = require("sinon");
const fs = require("fs");
const path = require("path");
const mock = require("mock-fs");
describe('Scenario test for builds using different configurations', () => {
    let backupLog;
    let texts = [];
    beforeEach(() => {
        backupLog = console.log;
        console.log = function (message) {
            if (message) {
                texts.push(message);
            }
        };
    });
    afterEach(() => {
        afterEach(function () {
            var _a, _b;
            if (((_a = this === null || this === void 0 ? void 0 : this.currentTest) === null || _a === void 0 ? void 0 : _a.state) === 'failed') {
                console.log = backupLog;
                texts.forEach((msg) => {
                    console.log(msg);
                });
                texts = [];
            }
            if (((_b = this === null || this === void 0 ? void 0 : this.currentTest) === null || _b === void 0 ? void 0 : _b.state) !== 'passed') {
                // a test, before(), or beforeEach() hook just failed
            }
        });
    });
    it('Perform build of simple basic Base folder only', () => {
        mock({
            'smithery.json': `{
                "model":"./model/model.xml",
                "configs":"configurations",
                "projectFiles":"features",
                "buildFolder":"build"
              }`,
            'configurations': {
                'default.config': 'Base'
            },
            'features': {
                'Base': {
                    'README.md': 'TEST'
                }
            }
        });
        const mkdirSyncStub = sinon.stub(fs, 'mkdirSync');
        const writeFileSyncStub = sinon.stub(fs, 'writeFileSync');
        const p = new Project_1.Project();
        p.build('default');
        //first the build folder because this one is missing
        //second call for the root folder
        chai_1.expect(mkdirSyncStub.calledOnce).to.be.true;
        chai_1.expect(mkdirSyncStub.calledWith(path.join(process.cwd(), 'build'))).to.be.true;
        chai_1.expect(writeFileSyncStub.calledOnce).to.be.true;
        chai_1.expect(writeFileSyncStub.calledWith('README.md', 'utf-8'));
        mock.restore();
        mkdirSyncStub.restore();
        writeFileSyncStub.restore();
    });
    it('Perform build of one additional folder and file withing', () => {
        mock({
            'smithery.json': `{
                "model":"./model/model.xml",
                "configs":"configurations",
                "projectFiles":"features",
                "buildFolder":"build"
              }`,
            'configurations': {
                'default.config': 'Base',
                'one.config': 'Base\nOne'
            },
            'features': {
                'Base': {
                    'README.md': 'TEST'
                },
                'One': {
                    'src': {
                        'main.js': 'function run() {console.log("running");}\n\nrun();'
                    }
                }
            }
        });
        const mkdirSyncStub = sinon.stub(fs, 'mkdirSync');
        const writeFileSyncStub = sinon.stub(fs, 'writeFileSync');
        const p = new Project_1.Project();
        p.build('one');
        //first the build folder because this one is missing
        //second call for the root folder
        chai_1.expect(mkdirSyncStub.calledTwice).to.be.true;
        chai_1.expect(mkdirSyncStub.calledWith(path.join(process.cwd(), 'build'))).to.be.true;
        chai_1.expect(mkdirSyncStub.calledWith(path.join(process.cwd(), 'build', 'src'))).to.be.true;
        chai_1.expect(writeFileSyncStub.calledTwice).to.be.true;
        chai_1.expect(writeFileSyncStub.calledWith(path.join(process.cwd(), 'build', 'README.md'), 'utf-8'));
        chai_1.expect(writeFileSyncStub.calledWith(path.join(process.cwd(), 'build', 'src', 'main.js'), 'utf-8'));
        mock.restore();
        mkdirSyncStub.restore();
        writeFileSyncStub.restore();
    });
    it('Throw an error if no specific configuration is set and the default configuration is not present', () => {
        mock({
            'smithery.json': `{
                "model":"./model/model.xml",
                "configs":"configurations",
                "projectFiles":"features",
                "buildFolder":"build"
              }`,
            'configurations': {
                'one.config': 'Base\nOne'
            },
            'features': {
                'Base': {
                    'README.md': 'TEST'
                },
                'One': {
                    'src': {
                        'main.js': 'function run() {console.log("running");}\n\nrun();'
                    }
                }
            }
        });
        const p = new Project_1.Project();
        chai_1.assert.throws(() => { p.build(); }, 'No configuration given, therefore no build possible!');
        mock.restore();
    });
    it('Perform build of default if no configuration name is given', () => {
        const backupWarn = console.warn;
        const warnings = [];
        mock({
            'smithery.json': `{
                "model":"./model/model.xml",
                "configs":"configurations",
                "projectFiles":"features",
                "buildFolder":"build"
              }`,
            'configurations': {
                'default.config': 'Base'
            },
            'features': {
                'Base': {
                    'README.md': 'TEST'
                }
            }
        });
        console.warn = (warning) => {
            warnings.push(warning);
        };
        const mkdirSyncStub = sinon.stub(fs, 'mkdirSync');
        const writeFileSyncStub = sinon.stub(fs, 'writeFileSync');
        const p = new Project_1.Project();
        p.build();
        //first the build folder because this one is missing
        //second call for the root folder
        chai_1.expect(mkdirSyncStub.calledOnce).to.be.true;
        chai_1.expect(mkdirSyncStub.calledWith(path.join(process.cwd(), 'build'))).to.be.true;
        chai_1.expect(writeFileSyncStub.calledOnce).to.be.true;
        chai_1.expect(writeFileSyncStub.calledWith('README.md', 'utf-8'));
        chai_1.expect(warnings.includes('No configuration set, switching to default'));
        mock.restore();
        console.warn = backupWarn;
        mkdirSyncStub.restore();
        writeFileSyncStub.restore();
    });
    it('Throw an error if the base feature is missing from the used configuration', () => {
        mock({
            'smithery.json': `{
                "model":"./model/model.xml",
                "configs":"configurations",
                "projectFiles":"features",
                "buildFolder":"build"
              }`,
            'configurations': {
                'default.config': 'One',
                'one.config': 'Base\nOne'
            },
            'features': {
                'One': {
                    'src': {
                        'main.js': 'function run() {console.log("running");}\n\nrun();'
                    }
                }
            }
        });
        const p = new Project_1.Project();
        chai_1.assert.throws(() => { p.build(); }, 'No Base feature set up! Build not possible!');
        mock.restore();
    });
    it('Throw an error if the base feature is missing from the features', () => {
        mock({
            'smithery.json': `{
                "model":"./model/model.xml",
                "configs":"configurations",
                "projectFiles":"features",
                "buildFolder":"build"
              }`,
            'configurations': {
                'default.config': 'Base',
                'one.config': 'Base\nOne'
            },
            'features': {
                'One': {
                    'src': {
                        'main.js': 'function run() {console.log("running");}\n\nrun();'
                    }
                }
            }
        });
        const p = new Project_1.Project();
        chai_1.assert.throws(() => { p.build(); }, 'Base feature is not at the source code, therefore we can not start');
        mock.restore();
    });
    it('Throw an error if the feature to imply is not at the features', () => {
        mock({
            'smithery.json': `{
                "model":"./model/model.xml",
                "configs":"configurations",
                "projectFiles":"features",
                "buildFolder":"build"
              }`,
            'configurations': {
                'default.config': 'Base',
                'one.config': 'Base\nOne'
            },
            'features': {
                'Base': {
                    'README.md': 'TEST'
                }
            }
        });
        const p = new Project_1.Project();
        chai_1.assert.throws(() => { p.build('one'); }, '[One] feature is not at the source code, stopped building');
        mock.restore();
    });
    it('Perform build of simple basic Base folder only', () => {
        mock({
            'build': {
                'README.md': 'TEST',
                'src': {
                    'main.js': 'console.log("HelloWorld");'
                }
            },
            'smithery.json': `{
                "model":"./model/model.xml",
                "configs":"configurations",
                "projectFiles":"features",
                "buildFolder":"build"
              }`,
            'configurations': {
                'default.config': 'Base'
            },
            'features': {
                'Base': {
                    'README.md': 'TEST'
                }
            }
        });
        const mkdirSyncStub = sinon.stub(fs, 'mkdirSync');
        const writeFileSyncStub = sinon.stub(fs, 'writeFileSync');
        const unlinkSyncSpy = sinon.spy(fs, 'unlinkSync');
        const rmdirSyncSpy = sinon.spy(fs, 'rmdirSync');
        const p = new Project_1.Project();
        p.build('default');
        //first the build folder because this one is missing
        //second call for the root folder
        chai_1.expect(mkdirSyncStub.calledOnce).to.be.true;
        chai_1.expect(mkdirSyncStub.calledWith(path.join(process.cwd(), 'build'))).to.be.true;
        chai_1.expect(writeFileSyncStub.calledOnce).to.be.true;
        chai_1.expect(writeFileSyncStub.calledWith('README.md', 'utf-8'));
        chai_1.expect(unlinkSyncSpy.calledTwice).to.be.true;
        chai_1.expect(unlinkSyncSpy.calledWith('README.md'));
        chai_1.expect(unlinkSyncSpy.calledWith('main.js'));
        chai_1.expect(rmdirSyncSpy.calledTwice).to.be.true;
        chai_1.expect(rmdirSyncSpy.calledWith('src'));
        chai_1.expect(rmdirSyncSpy.calledWith('build'));
        mock.restore();
        mkdirSyncStub.restore();
        writeFileSyncStub.restore();
    });
});
//# sourceMappingURL=build_scenarios.spec.js.map